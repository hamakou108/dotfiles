[[plugins]]
repo = 'Shougo/denite.nvim'
on_event = 'BufRead'
hook_add = '''
" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> ot
  \ denite#do_map('do_action', 'tabopen')
  nnoremap <silent><buffer><expr> os
  \ denite#do_map('do_action', 'split')
  nnoremap <silent><buffer><expr> ov
  \ denite#do_map('do_action', 'vsplit')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

nnoremap [denite] <Nop>
nmap <Leader>u [denite]
nmap <silent> [denite]b :<C-u>Denite buffer<CR>
nmap <silent> [denite]c :<C-u>Denite command<CR>
nmap <silent> [denite]f :<C-u>Denite file/rec<CR>
nmap <silent> [denite]g :<C-u>Denite grep<CR>
nmap <silent> [denite]* :<C-u>DeniteCursorWord grep<CR>
nmap <silent> [denite]l :<C-u>Denite line<CR>
nmap <silent> [denite]r :<C-u>Denite -resume<CR>
nmap <silent> [denite]<C-n> :<C-u>Denite -resume -cursor-pos=+1 -immediately<CR>
nmap <silent> [denite]<C-p> :<C-u>Denite -resume -cursor-pos=-1 -immediately<CR>
'''
hook_post_source = '''
" Change file/rec command.
call denite#custom#var('file/rec', 'command',
  \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
" Change sorters.
call denite#custom#source(
  \ 'file/rec', 'sorters', ['sorter/sublime'])
let s:menus = {}
let s:menus.my_commands = {
  \ 'description': 'Example commands'
  \ }
let s:menus.my_commands.command_candidates = [
  \ ['Split the window', 'vnew'],
  \ ['Open zsh menu', 'Denite menu:zsh'],
  \ ['Format code', 'FormatCode', 'go,python'],
  \ ]
call denite#custom#var('menu', 'menus', s:menus)
" Ag command on grep source
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts',
  \ ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
on_event = 'BufRead'
hook_add = '''
nnoremap [coc] <Nop>
nmap <Leader>c [coc]
'''
hook_post_source = '''
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <TAB> pumvisible() ? coc#_select_confirm() : "\<TAB>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap [coc]r <Plug>(coc-rename)

" Formatting selected code.
xmap [coc]f <Plug>(coc-format-selected)
nmap [coc]f <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" applying codeaction to the selected region.
" example: `[coc]aap` for current paragraph
xmap [coc]a <plug>(coc-codeaction-selected)
nmap [coc]a <plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap [coc]ac <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap [coc]af <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
" Note coc#float#scroll works on neovim >= 0.4.0 or vim >= 8.2.0750
nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"

" NeoVim-only mapping for visual mode scroll
" Useful on signatureHelp after jump placeholder of snippet expansion
if has('nvim')
  vnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#nvim_scroll(1, 1) : "\<C-f>"
  vnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#nvim_scroll(0, 1) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> [coc]<C-s> <Plug>(coc-range-select)
xmap <silent> [coc]<C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> [coc]a :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> [coc]e :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> [coc]c :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> [coc]o :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> [coc]s :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> [coc]j :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> [coc]k :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> [coc]p :<C-u>CocListResume<CR>


" coc-snippets
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

" convert visual selected code to snippet
xmap [coc]x <Plug>(coc-convert-snippet)


let g:coc_global_extensions = [
  \ 'coc-tsserver',
  \ 'coc-eslint',
  \ 'coc-phpls',
  \ 'coc-snippets'
\]
" Get licence key from shell environment variable
call coc#config('intelephense.licenceKey', $PHP_INTELEPHENSE_LICENCE_KEY)

call coc#util#install()
'''

[[plugins]]
repo = 'honza/vim-snippets'
on_event = 'InsertEnter'

[[plugins]]
repo = "airblade/vim-gitgutter"
on_event = 'BufRead'
hook_add = '''
nnoremap [git] <Nop>
nmap <Leader>g [git]
nmap [git]hs <Plug>(GitGutterStageHunk)
nmap [git]hu <Plug>(GitGutterUndoHunk)
nmap [git]hp <Plug>(GitGutterPreviewHunk)
'''
hook_post_source = '''
set updatetime=300
'''

[[plugins]]
repo = "tpope/vim-fugitive"
on_event = 'CmdlineEnter'
hook_add = '''
nnoremap [git] <Nop>
nmap <Leader>g [git]
nmap <silent> [git]a :<C-u>Gwrite<CR>
nmap <silent> [git]b :<C-u>Gblame<CR>
nmap <silent> [git]c :<C-u>Gcommit<CR>
nmap <silent> [git]d :<C-u>Gvdiff<CR>
nmap <silent> [git]f :<C-u>Gfetch<CR>
nmap <silent> [git]g :<C-u>Ggrep
nmap <silent> [git]m :<C-u>Gmerge
nmap <silent> [git]p :<C-u>Gpush<CR>
nmap <silent> [git]r :<C-u>Grebase -i<CR>
nmap <silent> [git]s :<C-u>Gstatus<CR>
'''

[[plugins]]
repo = 'junegunn/gv.vim'
on_event = 'CmdlineEnter'
hook_add = '''
nnoremap [git] <Nop>
nmap <Leader>g [git]
nmap <silent> [git]la :<C-u>GV<CR>
nmap <silent> [git]lc :<C-u>GV!<CR>
'''

[[plugins]]
repo = 'vim-test/vim-test'
on_event = 'BufRead'
hook_add = '''
nnoremap [vim-test] <Nop>
nmap <Leader>t [vim-test]
nmap <silent> [vim-test]n :TestNearest<CR>
nmap <silent> [vim-test]f :TestFile<CR>
nmap <silent> [vim-test]s :TestSuite<CR>
nmap <silent> [vim-test]l :TestLast<CR>
nmap <silent> [vim-test]v :TestVisit<CR>
'''

[[plugins]]
repo = 'tpope/vim-obsession'
on_event = ['CmdlineEnter']

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'kannokanno/previm'
on_event = ['CmdlineEnter']
on_ft = ['markdown', 'rrst', 'asciidoc']

[[plugins]]
repo = 'tyru/open-browser.vim'
on_event = ['CmdlineEnter']
on_ft = ['markdown', 'rrst', 'asciidoc']

