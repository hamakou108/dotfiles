# deoplete settings
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_event = 'InsertEnter'
hook_source = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#omni_patterns = {}
let g:deoplete#omni_patterns.java = '[^. *\t]\.\w*'
let g:deoplete#sources = {}
let g:deoplete#sources._ = []
let g:deoplete#file#enable_buffer_path = 1
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_event = 'InsertEnter'
on_ft = 'python'

[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
on_event = 'InsertEnter'
hook_source = '''
autocmd FileType java setlocal omnifunc=javacomplete#Complete
'''

# snippet expansion
# Tips: 'deoppet.nvim' which is improved version of 'neosnippet.vim' is comming soon!
[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_event = 'InsertEnter'
hook_source = '''
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <expr><TAB>
 \ pumvisible() ? "\<C-n>" :
 \ neosnippet#expandable_or_jumpable() ?
 \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# save vim session (type :Obsession to save)
[[plugins]]
repo = 'tpope/vim-obsession'

# syntax hilighting
[[plugins]]
repo = 'rcmdnk/vim-markdown'

#
[[plugins]]
repo = 'tyru/open-browser.vim'

# preview markdown
[[plugins]]
repo = 'kannokanno/previm'
